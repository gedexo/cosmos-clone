# Generated by Django 4.0 on 2022-01-10 10:33

import django.db.models.deletion
import tinymce.models
import versatileimagefield.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="branch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=100)),
                ("address", models.CharField(blank=True, max_length=100, null=True)),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("place", models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="products",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    versatileimagefield.fields.VersatileImageField(
                        blank=True, upload_to="productimage"
                    ),
                ),
                (
                    "image_ppoi",
                    versatileimagefield.fields.PPOIField(
                        default="0.5x0.5", editable=False, max_length=20
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("url", models.URLField()),
                (
                    "current_price",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "previous_price",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="slider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    versatileimagefield.fields.VersatileImageField(
                        blank=True, upload_to="sliderimage"
                    ),
                ),
                (
                    "image_ppoi",
                    versatileimagefield.fields.PPOIField(
                        default="0.5x0.5", editable=False, max_length=20
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("paragraph", models.CharField(blank=True, max_length=100, null=True)),
                ("url", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="technician",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "technician_id",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("name", models.CharField(max_length=100)),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("department", models.CharField(blank=True, max_length=100, null=True)),
                ("address", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "branch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.branch",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="service_request",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(auto_now=True, null=True)),
                ("category", models.CharField(max_length=50)),
                ("service_type", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=50)),
                ("phone", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "open"),
                            ("pending", "pending"),
                            ("attended", "attended"),
                            ("completed", "completed"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.branch",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="fitness",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer_address",
                    tinymce.models.HTMLField(
                        blank=True, max_length=200, null=True, verbose_name="content"
                    ),
                ),
                ("reported_date", models.DateField(blank=True, null=True)),
                (
                    "machine_type",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("model_no", models.CharField(blank=True, max_length=50, null=True)),
                ("date_of_purchase", models.DateField(blank=True, null=True)),
                ("complaints", models.CharField(blank=True, max_length=200, null=True)),
                ("amc", models.BooleanField(default=False)),
                ("has_warranty", models.BooleanField(default=False)),
                ("billno", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "action_taken",
                    tinymce.models.HTMLField(
                        blank=True, max_length=250, null=True, verbose_name="content"
                    ),
                ),
                ("attended_date", models.DateField(blank=True, null=True)),
                ("used_parts", models.CharField(blank=True, max_length=200, null=True)),
                ("amount", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("open", "open"),
                            ("pending", "pending"),
                            ("attended", "attended"),
                            ("completed", "completed"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "pending_reason",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("completed_date", models.DateField(blank=True, null=True)),
                (
                    "service_request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.service_request",
                    ),
                ),
                (
                    "technician_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.technician",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="cycle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer_address",
                    tinymce.models.HTMLField(
                        blank=True, max_length=200, null=True, verbose_name="content"
                    ),
                ),
                ("reported_date", models.DateField(blank=True, null=True)),
                ("model_no", models.CharField(blank=True, max_length=50, null=True)),
                ("date_of_purchase", models.DateField(blank=True, null=True)),
                ("complaints", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "accessories_with_byke",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("color", models.CharField(blank=True, max_length=50, null=True)),
                ("size", models.CharField(blank=True, max_length=50, null=True)),
                ("brand", models.CharField(blank=True, max_length=100, null=True)),
                ("recieved_date", models.DateField(blank=True, null=True)),
                ("has_warranty", models.BooleanField(default=False)),
                ("water_service", models.BooleanField(default=False)),
                ("billno", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "action_taken",
                    tinymce.models.HTMLField(
                        blank=True, max_length=250, null=True, verbose_name="content"
                    ),
                ),
                ("attended_date", models.DateField(blank=True, null=True)),
                ("used_parts", models.CharField(blank=True, max_length=200, null=True)),
                ("amount", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("open", "open"),
                            ("pending", "pending"),
                            ("attended", "attended"),
                            ("completed", "completed"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "pending_reason",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("completed_date", models.DateField(blank=True, null=True)),
                (
                    "service_request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.service_request",
                    ),
                ),
                (
                    "technician_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.technician",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="badminton",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=50, null=True)),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("attended_date", models.DateField(blank=True, null=True)),
                ("jobcard_no", models.CharField(blank=True, max_length=100, null=True)),
                ("services", models.CharField(blank=True, max_length=100, null=True)),
                ("reported_date", models.DateField(blank=True, null=True)),
                ("brand", models.CharField(blank=True, max_length=50, null=True)),
                ("model", models.CharField(blank=True, max_length=50, null=True)),
                ("remarks", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("open", "open"),
                            ("pending", "pending"),
                            ("attended", "attended"),
                            ("completed", "completed"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "pending_reason",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("completed_date", models.DateField(blank=True, null=True)),
                (
                    "nearest_branch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.branch",
                    ),
                ),
                (
                    "service_request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.service_request",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=225, unique=True)),
                ("full_name", models.CharField(max_length=225)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("designation", models.CharField(blank=True, max_length=50, null=True)),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "branch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="officialapi.branch",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
